/*
 * This file is generated by jOOQ.
*/
package net.comerge.codingday.backend.database.models.backend.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import net.comerge.codingday.backend.database.models.backend.Backend;
import net.comerge.codingday.backend.database.models.backend.Keys;
import net.comerge.codingday.backend.database.models.backend.tables.records.NewsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class News extends TableImpl<NewsRecord> {

    private static final long serialVersionUID = 189374287;

    /**
     * The reference instance of <code>BACKEND.NEWS</code>
     */
    public static final News NEWS = new News();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsRecord> getRecordType() {
        return NewsRecord.class;
    }

    /**
     * The column <code>BACKEND.NEWS.ID</code>.
     */
    public final TableField<NewsRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR BACKEND.SYSTEM_SEQUENCE_28BB8583_2CA5_4C42_B569_30893648F344)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>BACKEND.NEWS.CREATED_AT</code>.
     */
    public final TableField<NewsRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>BACKEND.NEWS.AUTHOR</code>.
     */
    public final TableField<NewsRecord, Long> AUTHOR = createField("AUTHOR", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>BACKEND.NEWS.TITLE</code>.
     */
    public final TableField<NewsRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>BACKEND.NEWS.MESSAGE</code>.
     */
    public final TableField<NewsRecord, String> MESSAGE = createField("MESSAGE", org.jooq.impl.SQLDataType.VARCHAR.length(1000).nullable(false), this, "");

    /**
     * Create a <code>BACKEND.NEWS</code> table reference
     */
    public News() {
        this("NEWS", null);
    }

    /**
     * Create an aliased <code>BACKEND.NEWS</code> table reference
     */
    public News(String alias) {
        this(alias, NEWS);
    }

    private News(String alias, Table<NewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private News(String alias, Table<NewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Backend.BACKEND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NewsRecord, Long> getIdentity() {
        return Keys.IDENTITY_NEWS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NewsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_24;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NewsRecord>> getKeys() {
        return Arrays.<UniqueKey<NewsRecord>>asList(Keys.CONSTRAINT_24);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NewsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NewsRecord, ?>>asList(Keys.CONSTRAINT_248);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public News as(String alias) {
        return new News(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public News rename(String name) {
        return new News(name, null);
    }
}
